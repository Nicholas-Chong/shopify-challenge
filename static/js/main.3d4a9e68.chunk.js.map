{"version":3,"sources":["components/Background/Background.js","components/ImageCard/DescriptionModal/DescriptionModal.js","utilities/index-db/index-db.js","components/ImageCard/LikeButton/LikeButton.js","components/ImageCard/ImageCard.js","components/LoadingSpinner/LoadingSpinner.js","components/ShowLikedSwitch/ShowLikedSwitch.js","utilities/animation/animation.js","components/LoadMoreButton/LoadMoreButton.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["AppContainer","children","bg","minH","overflow","maxW","margin","padding","DescriptionModal","useDisclosure","isOpen","onOpen","onClose","useContext","ImageContext","title","url","explanation","as","fontSize","onClick","display","size","src","alt","mb","colorScheme","mr","searchForImage","db","imageTitle","Promise","resolve","reject","request","transaction","objectStore","get","onsuccess","result","onerror","error","LikeButton","isLiked","setIsLiked","useState","image","AppContext","indexDb","useEffect","then","delete","console","log","deleteLikedImage","add","addLikedImage","Provider","value","style","color","createContext","ImageCard","showOnlyLiked","borderWidth","borderRadius","boxShadow","p","mt","fontWeight","lineHeight","date","LoadingSpinner","position","height","width","top","right","alignItems","justifyContent","ShowLikedSwitch","isChecked","setIsChecked","setShowOnlyLiked","bottom","background","onChange","gsap","registerPlugin","Power1","loadInAnimation","className","timeline","from","duration","autoAlpha","y","delay","ease","easeIn","LoadMoreButton","imagesData","setImagesData","startDate","setStartDate","isLoading","setIsLoading","endDateStr","Date","getFullYear","getMonth","getDate","toLocaleDateString","setMonth","startDateStr","fetch","response","json","data","concat","App","imagesLoaded","setImagesLoaded","setIndexDb","openRequest","indexedDB","open","onupgradeneeded","objectStoreNames","contains","createObjectStore","keyPath","theme","columns","spacing","map","element","media_type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3d4a9e68.chunk.js","sourcesContent":["import { Box } from '@chakra-ui/react';\n\nexport const AppContainer = ({ children }) => (\n  <Box bg=\"#E2E8F0\" minH=\"100vh\" overflow=\"hidden\">\n    <Box maxW=\"1600px\" margin=\"auto\" padding=\"2em\">\n      {children}\n    </Box>\n  </Box>\n);\n","import {\n  Box,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  Image,\n} from '@chakra-ui/react'\nimport { useContext } from 'react'\nimport { ImageContext } from '../ImageCard'\n\nexport const DescriptionModal = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const { title, url, explanation } = useContext(ImageContext)\n\n  return (\n    <>\n      <Box as='button' fontSize='small' onClick={onOpen} display='block'>\n        Show Description\n      </Box>\n      <Modal isOpen={isOpen} onClose={onClose} size='xl'>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>{title}</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Image src={url} alt={title} mb={3}/>\n            <p>{explanation}</p>\n          </ModalBody>\n          <ModalFooter>\n            <Button colorScheme='green' mr={3} onClick={onClose} alt='close'>\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n","export const openDb = () => {\n  return new Promise((resolve, reject) => {\n    const openRequest = indexedDB.open('shopispace', 2)\n\n    openRequest.onupgradeneeded = () => {\n      const db = openRequest.result\n      if (!db.objectStoreNames.contains('likedImages')) {\n        db.createObjectStore('likedImages', {keyPath: 'title'})\n      }\n    }\n\n    openRequest.onsuccess = () => resolve(openRequest.result)\n    openRequest.onerror = () => reject(openRequest.error)\n  })\n}\n\nexport const addLikedImage = (db, image) => {\n  const transaction = db.transaction('likedImages', 'readwrite')\n  const likedImages = transaction.objectStore('likedImages')\n\n  const request = likedImages.add(image)\n\n  request.onsuccess = () => {\n    console.log(`Added \"${request.result}\" to likedImages`)\n  }\n\n  request.onerror = () => {\n    console.log('Error', request.error)\n  }\n}\n\nexport const deleteLikedImage = (db, image) => {\n  const transaction = db.transaction('likedImages', 'readwrite')\n  const likedImages = transaction.objectStore('likedImages')\n\n  const request = likedImages.delete(image.title)\n\n  request.onsuccess = () => {\n    console.log(`Removed \"${image.title}\" from likedImages`)\n  }\n\n  request.onerror = () => {\n    console.log('Error', request.error)\n  }\n}\n\nexport const searchForImage = (db, imageTitle) => {\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction('likedImages', 'readwrite')\n    const likedImages = transaction.objectStore('likedImages')\n    \n    const request = likedImages.get(imageTitle)\n  \n    request.onsuccess = () => resolve(request.result)\n    request.onerror = () => reject(request.error)\n  })\n}\n","import { Box } from '@chakra-ui/layout'\nimport { IconContext } from 'react-icons'\nimport { AiFillHeart, AiOutlineHeart } from 'react-icons/ai'\nimport { useContext, useEffect, useState } from 'react'\nimport { ImageContext } from '../ImageCard'\nimport { AppContext } from '../../../App'\nimport {\n  addLikedImage,\n  deleteLikedImage,\n  searchForImage,\n} from '../../../utilities/index-db'\n\nexport const LikeButton = ({isLiked, setIsLiked}) => {\n  const [image] = useState(useContext(ImageContext))\n  const [indexDb] = useState(useContext(AppContext).db)\n\n  useEffect(() => {\n    searchForImage(indexDb, image.title).then((result) => {\n      if (result) setIsLiked(true)\n    })\n  })\n\n  const handleClick = () => {\n    if (isLiked) deleteLikedImage(indexDb, image)\n    else addLikedImage(indexDb, image)\n\n    setIsLiked(!isLiked)\n  }\n\n  return (\n    <Box\n      as='button'\n      display='inline-block'\n      onClick={handleClick}\n      alt={isLiked ? 'Unlike' : 'Like'}\n      title={isLiked ? 'Unlike' : 'Like'}\n    >\n      <IconContext.Provider\n        value={{ style: { fontSize: '30px', color: 'red' } }}\n      >\n        {isLiked ? <AiFillHeart /> : <AiOutlineHeart />}\n      </IconContext.Provider>\n    </Box>\n  )\n}\n","import { Box, Image } from '@chakra-ui/react'\nimport { createContext, useContext, useState, useEffect } from 'react'\nimport { DescriptionModal } from './DescriptionModal'\nimport { LikeButton } from './LikeButton'\nimport { AppContext } from '../../App'\nimport { searchForImage } from '../../utilities/index-db'\n\nexport const ImageContext = createContext()\n\nexport const ImageCard = ({ image }) => {\n  const [indexDb] = useState(useContext(AppContext).db)\n  const showOnlyLiked = useContext(AppContext).showOnlyLiked\n  const [isLiked, setIsLiked] = useState(false)\n\n  useEffect(() => {\n    searchForImage(indexDb, image.title).then((result) => {\n      if (result) setIsLiked(true)\n    })\n  })\n\n  return (\n    <ImageContext.Provider value={image}>\n      <Box\n        bg='white'\n        maxW='sm'\n        borderWidth='1px'\n        borderRadius='lg'\n        overflow='hidden'\n        display={showOnlyLiked ? (isLiked ? 'block' : 'none') : 'block'}\n        boxShadow='0 3px 10px rgb(0 0 0 / 0.2)'\n      >\n        <Image src={image.url} alt={image.title} />\n        <Box p='3'>\n          <Box mt='1' fontWeight='semibold' as='h4' lineHeight='tight'>\n            {image.title}\n          </Box>\n          <Box>{image.date}</Box>\n          <LikeButton isLiked={isLiked} setIsLiked={setIsLiked} />\n          <DescriptionModal />\n        </Box>\n      </Box>\n    </ImageContext.Provider>\n  )\n}\n","import { Spinner, Box } from '@chakra-ui/react'\n\nexport const LoadingSpinner = () => (\n  <Box\n    position='fixed'\n    height='100vh'\n    width='100vw'\n    top='0'\n    right='0'\n    display='flex'\n    alignItems='center'\n    justifyContent='center'\n  >\n    <center>\n      <Spinner/>\n      <p>Fun fact: I've been learning React for 2 years!</p>\n    </center>\n  </Box>\n)\n","import { Box, Switch } from '@chakra-ui/react'\nimport { useContext, useState } from 'react'\nimport { AppContext } from '../../App'\n\nexport const ShowLikedSwitch = () => {\n  const [isChecked, setIsChecked] = useState(false)\n  const { setShowOnlyLiked } = useContext(AppContext)\n\n  return (\n    <Box position='fixed' width='100vw' bottom='0' right='0' padding='2em'>\n      <center>\n        <Box\n          width='17em'\n          background='yellow'\n          padding='1em'\n          display='flex'\n          alignItems='center'\n          justifyContent='space-between'\n          bg='#E2E8F0'\n          borderRadius='lg'\n        >\n          <p>Show only liked images</p>\n          <Switch\n            size='md'\n            isChecked={isChecked}\n            onChange={() => {\n              setShowOnlyLiked(!isChecked)\n              setIsChecked(!isChecked)\n            }}\n          />\n        </Box>\n      </center>\n    </Box>\n  )\n}\n","import { Power1, gsap } from 'gsap'\n\n// Had to be included, otherwise production build does not work (animations break)\ngsap.registerPlugin(Power1)\n\nexport const loadInAnimation = (className) => {\n  var tl = gsap.timeline()\n  tl.from(className, {\n    duration: 0.5,\n    autoAlpha: 0,\n    y: 25,\n    delay: 0.15,\n    ease: Power1.easeIn,\n  })\n}\n\nexport const loadOutAnimation = (className) => {\n  var tl = gsap.timeline()\n  tl.to(className, {\n    duration: 0.5,\n    autoAlpha: 0,\n    y: 25,\n    delay: 0.15,\n    ease: Power1.easeIn,\n  })\n}","import { Button, Spinner, Box } from '@chakra-ui/react'\nimport { AppContext } from '../../App'\nimport { useContext, useState } from 'react'\nimport { loadInAnimation } from '../../utilities/animation'\n\nexport const LoadMoreButton = () => {\n  const { imagesData, setImagesData, startDate, setStartDate } =\n    useContext(AppContext)\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  const getNewImages = () => {\n    setIsLoading(true)\n\n    const endDateStr = new Date(\n      startDate.getFullYear(),\n      startDate.getMonth(),\n      startDate.getDate() - 1\n    ).toLocaleDateString('fr-CA')\n\n    startDate.setMonth(startDate.getMonth() - 3)\n    setStartDate(startDate)\n    const startDateStr = startDate.toLocaleDateString('fr-CA')\n\n    fetch(\n      `https://api.nasa.gov/planetary/apod?start_date=${startDateStr}&end_date=${endDateStr}&api_key=fusMDa3hRjdVjwuaweS6gsIjVDcmN7cmjsaj7nnX`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setImagesData(imagesData.concat(data))\n        setIsLoading(false)\n        loadInAnimation('.images')\n        console.log(imagesData, startDateStr, endDateStr)\n      })\n  }\n\n  return (\n    <Box mt='4em'>\n      <center>\n        <Button margin='auto' colorScheme='green' onClick={getNewImages}>\n          {!isLoading ? 'Load More' : <Spinner />}\n        </Button>\n      </center>\n    </Box>\n  )\n}\n","import React, { useEffect, useState, createContext } from 'react'\nimport {\n  Heading,\n  ChakraProvider,\n  SimpleGrid,\n  theme,\n  Box,\n} from '@chakra-ui/react'\nimport { AppContainer } from './components/Background'\nimport { ImageCard } from './components/ImageCard'\nimport { LoadingSpinner } from './components/LoadingSpinner'\nimport { openDb } from './utilities/index-db'\nimport { ShowLikedSwitch } from './components/ShowLikedSwitch'\nimport { loadInAnimation } from './utilities/animation'\nimport { LoadMoreButton } from './components/LoadMoreButton'\n\nexport const AppContext = createContext()\n\nfunction App() {\n  const [imagesLoaded, setImagesLoaded] = useState(false)\n  const [imagesData, setImagesData] = useState([])\n  const [indexDb, setIndexDb] = useState(null)\n  const [showOnlyLiked, setShowOnlyLiked] = useState(false)\n  const [startDate, setStartDate] = useState(new Date())\n\n  // Initial Load (Only runs once)\n  useEffect(() => {\n    openDb().then((result) => setIndexDb(result))\n\n    startDate.setMonth(startDate.getMonth() - 3)\n    setStartDate(startDate)\n    const startDateStr = startDate.toLocaleDateString('fr-CA')\n\n    fetch(\n      `https://api.nasa.gov/planetary/apod?start_date=${startDateStr}&api_key=fusMDa3hRjdVjwuaweS6gsIjVDcmN7cmjsaj7nnX`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setImagesData(data)\n        setImagesLoaded(true)\n        loadInAnimation('.images')\n      })\n    // eslint-disable-next-line\n  }, [])\n\n  // Runs each time showOnlyLiked is toggled\n  useEffect(() => {\n    loadInAnimation('.images')\n  }, [showOnlyLiked])\n\n  return (\n    <ChakraProvider theme={theme}>\n      <AppContext.Provider\n        value={{\n          db: indexDb,\n          showOnlyLiked: showOnlyLiked,\n          setShowOnlyLiked: setShowOnlyLiked,\n          imagesData: imagesData,\n          setImagesData: setImagesData,\n          startDate,\n          setStartDate,\n        }}\n      >\n        <AppContainer>\n          <Heading mb={4}>ShopiSpace</Heading>\n          {!imagesLoaded && <LoadingSpinner />}\n          {imagesLoaded && (\n            <Box className='images' mb='8em'>\n              <SimpleGrid columns={[1, 2, 3, 4]} spacing={10}>\n                {imagesData.map((element) => {\n                  if (element.media_type === 'image')\n                    return <ImageCard image={element} />\n                  else return null\n                })}\n              </SimpleGrid>\n              {!showOnlyLiked && <LoadMoreButton />}\n            </Box>\n          )}\n          <ShowLikedSwitch />\n        </AppContainer>\n      </AppContext.Provider>\n    </ChakraProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}